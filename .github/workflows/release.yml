name: Release - Build and Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'testpypi'
        type: choice
        options:
        - testpypi
        - pypi

jobs:
  test-before-release:
    name: Pre-Release Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio

    - name: Run critical tests
      run: |
        pytest tests/ -v --tb=short -m "not slow" --maxfail=3

  build-and-publish:
    name: Build and Publish to PyPI
    runs-on: ubuntu-latest
    needs: test-before-release
    environment: 
      name: ${{ github.event.inputs.environment || 'pypi' }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package quality
      run: |
        python -m twine check dist/*
        
    - name: Test package installation
      run: |
        # Test in clean environment
        python -m pip install dist/*.whl
        python -c "import stinger; print('‚úÖ Package imports successfully')"

    - name: Publish to Test PyPI
      if: github.event.inputs.environment == 'testpypi' || (github.event_name == 'release' && contains(github.ref, 'alpha'))
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        verbose: true

    - name: Publish to PyPI
      if: github.event.inputs.environment == 'pypi' || (github.event_name == 'release' && !contains(github.ref, 'alpha'))
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

    - name: Create deployment summary
      if: always()
      run: |
        echo "## üöÄ Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ github.event.inputs.environment || 'pypi' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Package**: stinger-guardrails-alpha" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: $(python setup.py --version 2>/dev/null || echo 'N/A')" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: success()
    steps:
    - uses: actions/checkout@v4

    - name: Create GitHub release notes
      if: github.event_name == 'release'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Generate release notes
          const notes = `
          ## üõ°Ô∏è Stinger Guardrails Framework
          
          ### Installation
          \`\`\`bash
          pip install stinger-guardrails-alpha
          \`\`\`
          
          ### Quick Start
          \`\`\`bash
          stinger setup
          stinger demo
          \`\`\`
          
          ### What's New
          - See CHANGELOG.md for detailed changes
          - All examples updated for pip installation
          - Comprehensive test suite
          - Production-ready security
          
          ### Documentation
          - [Getting Started Guide](https://github.com/virtualsteve-star/stinger#readme)
          - [API Documentation](https://github.com/virtualsteve-star/stinger/tree/main/docs)
          - [Examples](https://github.com/virtualsteve-star/stinger/tree/main/examples)
          `;
          
          // Update release description
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: context.payload.release.id,
            body: notes
          });

    - name: Notify deployment
      run: |
        echo "‚úÖ Release completed successfully!"
        echo "üì¶ Package available on PyPI"
        echo "üìö Documentation updated"